// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/noxymon/ecomm-go/domain/catalogue/pkg/dao/model"
)

func newCategoriesProduct(db *gorm.DB, opts ...gen.DOOption) categoriesProduct {
	_categoriesProduct := categoriesProduct{}

	_categoriesProduct.categoriesProductDo.UseDB(db, opts...)
	_categoriesProduct.categoriesProductDo.UseModel(&model.CategoriesProduct{})

	tableName := _categoriesProduct.categoriesProductDo.TableName()
	_categoriesProduct.ALL = field.NewAsterisk(tableName)
	_categoriesProduct.CategoriesLvl3Slug = field.NewString(tableName, "categories_lvl3_slug")
	_categoriesProduct.ProductID = field.NewString(tableName, "product_id")
	_categoriesProduct.CreatedDate = field.NewTime(tableName, "created_date")
	_categoriesProduct.UpdatedDate = field.NewTime(tableName, "updated_date")
	_categoriesProduct.CreatedBy = field.NewString(tableName, "created_by")
	_categoriesProduct.UpdatedBy = field.NewString(tableName, "updated_by")

	_categoriesProduct.fillFieldMap()

	return _categoriesProduct
}

type categoriesProduct struct {
	categoriesProductDo categoriesProductDo

	ALL                field.Asterisk
	CategoriesLvl3Slug field.String
	ProductID          field.String
	CreatedDate        field.Time
	UpdatedDate        field.Time
	CreatedBy          field.String
	UpdatedBy          field.String

	fieldMap map[string]field.Expr
}

func (c categoriesProduct) Table(newTableName string) *categoriesProduct {
	c.categoriesProductDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c categoriesProduct) As(alias string) *categoriesProduct {
	c.categoriesProductDo.DO = *(c.categoriesProductDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *categoriesProduct) updateTableName(table string) *categoriesProduct {
	c.ALL = field.NewAsterisk(table)
	c.CategoriesLvl3Slug = field.NewString(table, "categories_lvl3_slug")
	c.ProductID = field.NewString(table, "product_id")
	c.CreatedDate = field.NewTime(table, "created_date")
	c.UpdatedDate = field.NewTime(table, "updated_date")
	c.CreatedBy = field.NewString(table, "created_by")
	c.UpdatedBy = field.NewString(table, "updated_by")

	c.fillFieldMap()

	return c
}

func (c *categoriesProduct) WithContext(ctx context.Context) *categoriesProductDo {
	return c.categoriesProductDo.WithContext(ctx)
}

func (c categoriesProduct) TableName() string { return c.categoriesProductDo.TableName() }

func (c categoriesProduct) Alias() string { return c.categoriesProductDo.Alias() }

func (c categoriesProduct) Columns(cols ...field.Expr) gen.Columns {
	return c.categoriesProductDo.Columns(cols...)
}

func (c *categoriesProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *categoriesProduct) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["categories_lvl3_slug"] = c.CategoriesLvl3Slug
	c.fieldMap["product_id"] = c.ProductID
	c.fieldMap["created_date"] = c.CreatedDate
	c.fieldMap["updated_date"] = c.UpdatedDate
	c.fieldMap["created_by"] = c.CreatedBy
	c.fieldMap["updated_by"] = c.UpdatedBy
}

func (c categoriesProduct) clone(db *gorm.DB) categoriesProduct {
	c.categoriesProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c categoriesProduct) replaceDB(db *gorm.DB) categoriesProduct {
	c.categoriesProductDo.ReplaceDB(db)
	return c
}

type categoriesProductDo struct{ gen.DO }

func (c categoriesProductDo) Debug() *categoriesProductDo {
	return c.withDO(c.DO.Debug())
}

func (c categoriesProductDo) WithContext(ctx context.Context) *categoriesProductDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c categoriesProductDo) ReadDB() *categoriesProductDo {
	return c.Clauses(dbresolver.Read)
}

func (c categoriesProductDo) WriteDB() *categoriesProductDo {
	return c.Clauses(dbresolver.Write)
}

func (c categoriesProductDo) Session(config *gorm.Session) *categoriesProductDo {
	return c.withDO(c.DO.Session(config))
}

func (c categoriesProductDo) Clauses(conds ...clause.Expression) *categoriesProductDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c categoriesProductDo) Returning(value interface{}, columns ...string) *categoriesProductDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c categoriesProductDo) Not(conds ...gen.Condition) *categoriesProductDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c categoriesProductDo) Or(conds ...gen.Condition) *categoriesProductDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c categoriesProductDo) Select(conds ...field.Expr) *categoriesProductDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c categoriesProductDo) Where(conds ...gen.Condition) *categoriesProductDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c categoriesProductDo) Order(conds ...field.Expr) *categoriesProductDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c categoriesProductDo) Distinct(cols ...field.Expr) *categoriesProductDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c categoriesProductDo) Omit(cols ...field.Expr) *categoriesProductDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c categoriesProductDo) Join(table schema.Tabler, on ...field.Expr) *categoriesProductDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c categoriesProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) *categoriesProductDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c categoriesProductDo) RightJoin(table schema.Tabler, on ...field.Expr) *categoriesProductDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c categoriesProductDo) Group(cols ...field.Expr) *categoriesProductDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c categoriesProductDo) Having(conds ...gen.Condition) *categoriesProductDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c categoriesProductDo) Limit(limit int) *categoriesProductDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c categoriesProductDo) Offset(offset int) *categoriesProductDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c categoriesProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *categoriesProductDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c categoriesProductDo) Unscoped() *categoriesProductDo {
	return c.withDO(c.DO.Unscoped())
}

func (c categoriesProductDo) Create(values ...*model.CategoriesProduct) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c categoriesProductDo) CreateInBatches(values []*model.CategoriesProduct, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c categoriesProductDo) Save(values ...*model.CategoriesProduct) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c categoriesProductDo) First() (*model.CategoriesProduct, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoriesProduct), nil
	}
}

func (c categoriesProductDo) Take() (*model.CategoriesProduct, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoriesProduct), nil
	}
}

func (c categoriesProductDo) Last() (*model.CategoriesProduct, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoriesProduct), nil
	}
}

func (c categoriesProductDo) Find() ([]*model.CategoriesProduct, error) {
	result, err := c.DO.Find()
	return result.([]*model.CategoriesProduct), err
}

func (c categoriesProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CategoriesProduct, err error) {
	buf := make([]*model.CategoriesProduct, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c categoriesProductDo) FindInBatches(result *[]*model.CategoriesProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c categoriesProductDo) Attrs(attrs ...field.AssignExpr) *categoriesProductDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c categoriesProductDo) Assign(attrs ...field.AssignExpr) *categoriesProductDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c categoriesProductDo) Joins(fields ...field.RelationField) *categoriesProductDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c categoriesProductDo) Preload(fields ...field.RelationField) *categoriesProductDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c categoriesProductDo) FirstOrInit() (*model.CategoriesProduct, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoriesProduct), nil
	}
}

func (c categoriesProductDo) FirstOrCreate() (*model.CategoriesProduct, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoriesProduct), nil
	}
}

func (c categoriesProductDo) FindByPage(offset int, limit int) (result []*model.CategoriesProduct, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c categoriesProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c categoriesProductDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c categoriesProductDo) Delete(models ...*model.CategoriesProduct) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *categoriesProductDo) withDO(do gen.Dao) *categoriesProductDo {
	c.DO = *do.(*gen.DO)
	return c
}
