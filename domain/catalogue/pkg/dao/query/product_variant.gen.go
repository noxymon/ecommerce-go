// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/noxymon/ecomm-go/domain/catalogue/pkg/dao/model"
)

func newProductVariant(db *gorm.DB, opts ...gen.DOOption) productVariant {
	_productVariant := productVariant{}

	_productVariant.productVariantDo.UseDB(db, opts...)
	_productVariant.productVariantDo.UseModel(&model.ProductVariant{})

	tableName := _productVariant.productVariantDo.TableName()
	_productVariant.ALL = field.NewAsterisk(tableName)
	_productVariant.ID = field.NewString(tableName, "id")
	_productVariant.Name = field.NewString(tableName, "name")
	_productVariant.Price = field.NewFloat64(tableName, "price")
	_productVariant.SpecialPrice = field.NewFloat64(tableName, "special_price")
	_productVariant.SpecialPriceStartDate = field.NewTime(tableName, "special_price_start_date")
	_productVariant.SpecialPriceEndDate = field.NewTime(tableName, "special_price_end_date")
	_productVariant.StockAvailable = field.NewInt32(tableName, "stock_available")
	_productVariant.ProductID = field.NewInt64(tableName, "product_id")
	_productVariant.Status = field.NewInt32(tableName, "status")
	_productVariant.IsMainVariant = field.NewBool(tableName, "is_main_variant")
	_productVariant.CreatedDate = field.NewTime(tableName, "created_date")
	_productVariant.UpdatedDate = field.NewTime(tableName, "updated_date")
	_productVariant.CreatedBy = field.NewString(tableName, "created_by")
	_productVariant.UpdatedBy = field.NewString(tableName, "updated_by")

	_productVariant.fillFieldMap()

	return _productVariant
}

type productVariant struct {
	productVariantDo productVariantDo

	ALL                   field.Asterisk
	ID                    field.String
	Name                  field.String
	Price                 field.Float64
	SpecialPrice          field.Float64
	SpecialPriceStartDate field.Time
	SpecialPriceEndDate   field.Time
	StockAvailable        field.Int32
	ProductID             field.Int64
	Status                field.Int32
	IsMainVariant         field.Bool
	CreatedDate           field.Time
	UpdatedDate           field.Time
	CreatedBy             field.String
	UpdatedBy             field.String

	fieldMap map[string]field.Expr
}

func (p productVariant) Table(newTableName string) *productVariant {
	p.productVariantDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productVariant) As(alias string) *productVariant {
	p.productVariantDo.DO = *(p.productVariantDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productVariant) updateTableName(table string) *productVariant {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.Name = field.NewString(table, "name")
	p.Price = field.NewFloat64(table, "price")
	p.SpecialPrice = field.NewFloat64(table, "special_price")
	p.SpecialPriceStartDate = field.NewTime(table, "special_price_start_date")
	p.SpecialPriceEndDate = field.NewTime(table, "special_price_end_date")
	p.StockAvailable = field.NewInt32(table, "stock_available")
	p.ProductID = field.NewInt64(table, "product_id")
	p.Status = field.NewInt32(table, "status")
	p.IsMainVariant = field.NewBool(table, "is_main_variant")
	p.CreatedDate = field.NewTime(table, "created_date")
	p.UpdatedDate = field.NewTime(table, "updated_date")
	p.CreatedBy = field.NewString(table, "created_by")
	p.UpdatedBy = field.NewString(table, "updated_by")

	p.fillFieldMap()

	return p
}

func (p *productVariant) WithContext(ctx context.Context) *productVariantDo {
	return p.productVariantDo.WithContext(ctx)
}

func (p productVariant) TableName() string { return p.productVariantDo.TableName() }

func (p productVariant) Alias() string { return p.productVariantDo.Alias() }

func (p productVariant) Columns(cols ...field.Expr) gen.Columns {
	return p.productVariantDo.Columns(cols...)
}

func (p *productVariant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productVariant) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 14)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["price"] = p.Price
	p.fieldMap["special_price"] = p.SpecialPrice
	p.fieldMap["special_price_start_date"] = p.SpecialPriceStartDate
	p.fieldMap["special_price_end_date"] = p.SpecialPriceEndDate
	p.fieldMap["stock_available"] = p.StockAvailable
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["status"] = p.Status
	p.fieldMap["is_main_variant"] = p.IsMainVariant
	p.fieldMap["created_date"] = p.CreatedDate
	p.fieldMap["updated_date"] = p.UpdatedDate
	p.fieldMap["created_by"] = p.CreatedBy
	p.fieldMap["updated_by"] = p.UpdatedBy
}

func (p productVariant) clone(db *gorm.DB) productVariant {
	p.productVariantDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productVariant) replaceDB(db *gorm.DB) productVariant {
	p.productVariantDo.ReplaceDB(db)
	return p
}

type productVariantDo struct{ gen.DO }

func (p productVariantDo) Debug() *productVariantDo {
	return p.withDO(p.DO.Debug())
}

func (p productVariantDo) WithContext(ctx context.Context) *productVariantDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productVariantDo) ReadDB() *productVariantDo {
	return p.Clauses(dbresolver.Read)
}

func (p productVariantDo) WriteDB() *productVariantDo {
	return p.Clauses(dbresolver.Write)
}

func (p productVariantDo) Session(config *gorm.Session) *productVariantDo {
	return p.withDO(p.DO.Session(config))
}

func (p productVariantDo) Clauses(conds ...clause.Expression) *productVariantDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productVariantDo) Returning(value interface{}, columns ...string) *productVariantDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productVariantDo) Not(conds ...gen.Condition) *productVariantDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productVariantDo) Or(conds ...gen.Condition) *productVariantDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productVariantDo) Select(conds ...field.Expr) *productVariantDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productVariantDo) Where(conds ...gen.Condition) *productVariantDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productVariantDo) Order(conds ...field.Expr) *productVariantDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productVariantDo) Distinct(cols ...field.Expr) *productVariantDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productVariantDo) Omit(cols ...field.Expr) *productVariantDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productVariantDo) Join(table schema.Tabler, on ...field.Expr) *productVariantDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productVariantDo) LeftJoin(table schema.Tabler, on ...field.Expr) *productVariantDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productVariantDo) RightJoin(table schema.Tabler, on ...field.Expr) *productVariantDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productVariantDo) Group(cols ...field.Expr) *productVariantDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productVariantDo) Having(conds ...gen.Condition) *productVariantDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productVariantDo) Limit(limit int) *productVariantDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productVariantDo) Offset(offset int) *productVariantDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productVariantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *productVariantDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productVariantDo) Unscoped() *productVariantDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productVariantDo) Create(values ...*model.ProductVariant) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productVariantDo) CreateInBatches(values []*model.ProductVariant, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productVariantDo) Save(values ...*model.ProductVariant) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productVariantDo) First() (*model.ProductVariant, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductVariant), nil
	}
}

func (p productVariantDo) Take() (*model.ProductVariant, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductVariant), nil
	}
}

func (p productVariantDo) Last() (*model.ProductVariant, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductVariant), nil
	}
}

func (p productVariantDo) Find() ([]*model.ProductVariant, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductVariant), err
}

func (p productVariantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductVariant, err error) {
	buf := make([]*model.ProductVariant, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productVariantDo) FindInBatches(result *[]*model.ProductVariant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productVariantDo) Attrs(attrs ...field.AssignExpr) *productVariantDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productVariantDo) Assign(attrs ...field.AssignExpr) *productVariantDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productVariantDo) Joins(fields ...field.RelationField) *productVariantDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productVariantDo) Preload(fields ...field.RelationField) *productVariantDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productVariantDo) FirstOrInit() (*model.ProductVariant, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductVariant), nil
	}
}

func (p productVariantDo) FirstOrCreate() (*model.ProductVariant, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductVariant), nil
	}
}

func (p productVariantDo) FindByPage(offset int, limit int) (result []*model.ProductVariant, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productVariantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productVariantDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productVariantDo) Delete(models ...*model.ProductVariant) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productVariantDo) withDO(do gen.Dao) *productVariantDo {
	p.DO = *do.(*gen.DO)
	return p
}
