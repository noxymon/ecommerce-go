// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/noxymon/ecomm-go/domain/catalogue/pkg/dao/model"
)

func newCategoriesLvl1(db *gorm.DB, opts ...gen.DOOption) categoriesLvl1 {
	_categoriesLvl1 := categoriesLvl1{}

	_categoriesLvl1.categoriesLvl1Do.UseDB(db, opts...)
	_categoriesLvl1.categoriesLvl1Do.UseModel(&model.CategoriesLvl1{})

	tableName := _categoriesLvl1.categoriesLvl1Do.TableName()
	_categoriesLvl1.ALL = field.NewAsterisk(tableName)
	_categoriesLvl1.Slug = field.NewString(tableName, "slug")
	_categoriesLvl1.Name = field.NewString(tableName, "name")
	_categoriesLvl1.Status = field.NewInt32(tableName, "status")
	_categoriesLvl1.CreatedDate = field.NewTime(tableName, "created_date")
	_categoriesLvl1.UpdatedDate = field.NewTime(tableName, "updated_date")
	_categoriesLvl1.CreatedBy = field.NewString(tableName, "created_by")
	_categoriesLvl1.UpdatedBy = field.NewString(tableName, "updated_by")
	_categoriesLvl1.IsVisible = field.NewBool(tableName, "is_visible")

	_categoriesLvl1.fillFieldMap()

	return _categoriesLvl1
}

type categoriesLvl1 struct {
	categoriesLvl1Do categoriesLvl1Do

	ALL         field.Asterisk
	Slug        field.String
	Name        field.String
	Status      field.Int32
	CreatedDate field.Time
	UpdatedDate field.Time
	CreatedBy   field.String
	UpdatedBy   field.String
	IsVisible   field.Bool

	fieldMap map[string]field.Expr
}

func (c categoriesLvl1) Table(newTableName string) *categoriesLvl1 {
	c.categoriesLvl1Do.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c categoriesLvl1) As(alias string) *categoriesLvl1 {
	c.categoriesLvl1Do.DO = *(c.categoriesLvl1Do.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *categoriesLvl1) updateTableName(table string) *categoriesLvl1 {
	c.ALL = field.NewAsterisk(table)
	c.Slug = field.NewString(table, "slug")
	c.Name = field.NewString(table, "name")
	c.Status = field.NewInt32(table, "status")
	c.CreatedDate = field.NewTime(table, "created_date")
	c.UpdatedDate = field.NewTime(table, "updated_date")
	c.CreatedBy = field.NewString(table, "created_by")
	c.UpdatedBy = field.NewString(table, "updated_by")
	c.IsVisible = field.NewBool(table, "is_visible")

	c.fillFieldMap()

	return c
}

func (c *categoriesLvl1) WithContext(ctx context.Context) *categoriesLvl1Do {
	return c.categoriesLvl1Do.WithContext(ctx)
}

func (c categoriesLvl1) TableName() string { return c.categoriesLvl1Do.TableName() }

func (c categoriesLvl1) Alias() string { return c.categoriesLvl1Do.Alias() }

func (c categoriesLvl1) Columns(cols ...field.Expr) gen.Columns {
	return c.categoriesLvl1Do.Columns(cols...)
}

func (c *categoriesLvl1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *categoriesLvl1) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["slug"] = c.Slug
	c.fieldMap["name"] = c.Name
	c.fieldMap["status"] = c.Status
	c.fieldMap["created_date"] = c.CreatedDate
	c.fieldMap["updated_date"] = c.UpdatedDate
	c.fieldMap["created_by"] = c.CreatedBy
	c.fieldMap["updated_by"] = c.UpdatedBy
	c.fieldMap["is_visible"] = c.IsVisible
}

func (c categoriesLvl1) clone(db *gorm.DB) categoriesLvl1 {
	c.categoriesLvl1Do.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c categoriesLvl1) replaceDB(db *gorm.DB) categoriesLvl1 {
	c.categoriesLvl1Do.ReplaceDB(db)
	return c
}

type categoriesLvl1Do struct{ gen.DO }

func (c categoriesLvl1Do) Debug() *categoriesLvl1Do {
	return c.withDO(c.DO.Debug())
}

func (c categoriesLvl1Do) WithContext(ctx context.Context) *categoriesLvl1Do {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c categoriesLvl1Do) ReadDB() *categoriesLvl1Do {
	return c.Clauses(dbresolver.Read)
}

func (c categoriesLvl1Do) WriteDB() *categoriesLvl1Do {
	return c.Clauses(dbresolver.Write)
}

func (c categoriesLvl1Do) Session(config *gorm.Session) *categoriesLvl1Do {
	return c.withDO(c.DO.Session(config))
}

func (c categoriesLvl1Do) Clauses(conds ...clause.Expression) *categoriesLvl1Do {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c categoriesLvl1Do) Returning(value interface{}, columns ...string) *categoriesLvl1Do {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c categoriesLvl1Do) Not(conds ...gen.Condition) *categoriesLvl1Do {
	return c.withDO(c.DO.Not(conds...))
}

func (c categoriesLvl1Do) Or(conds ...gen.Condition) *categoriesLvl1Do {
	return c.withDO(c.DO.Or(conds...))
}

func (c categoriesLvl1Do) Select(conds ...field.Expr) *categoriesLvl1Do {
	return c.withDO(c.DO.Select(conds...))
}

func (c categoriesLvl1Do) Where(conds ...gen.Condition) *categoriesLvl1Do {
	return c.withDO(c.DO.Where(conds...))
}

func (c categoriesLvl1Do) Order(conds ...field.Expr) *categoriesLvl1Do {
	return c.withDO(c.DO.Order(conds...))
}

func (c categoriesLvl1Do) Distinct(cols ...field.Expr) *categoriesLvl1Do {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c categoriesLvl1Do) Omit(cols ...field.Expr) *categoriesLvl1Do {
	return c.withDO(c.DO.Omit(cols...))
}

func (c categoriesLvl1Do) Join(table schema.Tabler, on ...field.Expr) *categoriesLvl1Do {
	return c.withDO(c.DO.Join(table, on...))
}

func (c categoriesLvl1Do) LeftJoin(table schema.Tabler, on ...field.Expr) *categoriesLvl1Do {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c categoriesLvl1Do) RightJoin(table schema.Tabler, on ...field.Expr) *categoriesLvl1Do {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c categoriesLvl1Do) Group(cols ...field.Expr) *categoriesLvl1Do {
	return c.withDO(c.DO.Group(cols...))
}

func (c categoriesLvl1Do) Having(conds ...gen.Condition) *categoriesLvl1Do {
	return c.withDO(c.DO.Having(conds...))
}

func (c categoriesLvl1Do) Limit(limit int) *categoriesLvl1Do {
	return c.withDO(c.DO.Limit(limit))
}

func (c categoriesLvl1Do) Offset(offset int) *categoriesLvl1Do {
	return c.withDO(c.DO.Offset(offset))
}

func (c categoriesLvl1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) *categoriesLvl1Do {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c categoriesLvl1Do) Unscoped() *categoriesLvl1Do {
	return c.withDO(c.DO.Unscoped())
}

func (c categoriesLvl1Do) Create(values ...*model.CategoriesLvl1) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c categoriesLvl1Do) CreateInBatches(values []*model.CategoriesLvl1, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c categoriesLvl1Do) Save(values ...*model.CategoriesLvl1) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c categoriesLvl1Do) First() (*model.CategoriesLvl1, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoriesLvl1), nil
	}
}

func (c categoriesLvl1Do) Take() (*model.CategoriesLvl1, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoriesLvl1), nil
	}
}

func (c categoriesLvl1Do) Last() (*model.CategoriesLvl1, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoriesLvl1), nil
	}
}

func (c categoriesLvl1Do) Find() ([]*model.CategoriesLvl1, error) {
	result, err := c.DO.Find()
	return result.([]*model.CategoriesLvl1), err
}

func (c categoriesLvl1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CategoriesLvl1, err error) {
	buf := make([]*model.CategoriesLvl1, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c categoriesLvl1Do) FindInBatches(result *[]*model.CategoriesLvl1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c categoriesLvl1Do) Attrs(attrs ...field.AssignExpr) *categoriesLvl1Do {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c categoriesLvl1Do) Assign(attrs ...field.AssignExpr) *categoriesLvl1Do {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c categoriesLvl1Do) Joins(fields ...field.RelationField) *categoriesLvl1Do {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c categoriesLvl1Do) Preload(fields ...field.RelationField) *categoriesLvl1Do {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c categoriesLvl1Do) FirstOrInit() (*model.CategoriesLvl1, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoriesLvl1), nil
	}
}

func (c categoriesLvl1Do) FirstOrCreate() (*model.CategoriesLvl1, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoriesLvl1), nil
	}
}

func (c categoriesLvl1Do) FindByPage(offset int, limit int) (result []*model.CategoriesLvl1, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c categoriesLvl1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c categoriesLvl1Do) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c categoriesLvl1Do) Delete(models ...*model.CategoriesLvl1) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *categoriesLvl1Do) withDO(do gen.Dao) *categoriesLvl1Do {
	c.DO = *do.(*gen.DO)
	return c
}
